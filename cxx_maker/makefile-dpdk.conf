#生成makefile所在的目录的绝对路径
#MAKEFILE_LIST是make工具定义的环境变量，最后一个值就是当前的makefile的启动路径（可能是相对路径）
TOP_DIR := $(strip $(patsubst %/, %, $(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
INC_DIR := $(TOP_DIR)/include
SRC_DIR := $(TOP_DIR)/src
#编译目录
BIN_DIR := $(TOP_DIR)/release
BIN_DIR_DBG := $(TOP_DIR)/debug
#源文件后缀
SUFFIX := .c
#设置CC
CC := gcc

#检查O
BUILDTYPE := $(strip $(O))
ifeq ($(BUILDTYPE), debug)
BUILDTYPE = debug
else
ifeq ($(BUILDTYPE), release)
BUILDTYPE = release
else
ifeq ($(BUILDTYPE), clean)
BUILDTYPE = clean
else
$(error "Invaild O environment variable, usering[make O=debug|release|clean]")
endif
endif
endif

# Build using pkg-config variables if possible
ifeq ($(shell pkg-config --exists libdpdk && echo 0),0)


PKGCONF ?= pkg-config
PC_FILE := $(shell $(PKGCONF) --path libdpdk 2>/dev/null)

#编译器、链接器
LD := gcc

#编译选项
CXXFLAGS := -std=gnu11 -O3 -g0 -fmessage-length=0 $(shell $(PKGCONF) --cflags libdpdk)
CXXFLAGS_DBG := -std=gnu11 -g3 -O0 -fmessage-length=0 $(shell $(PKGCONF) --cflags libdpdk)

#宏定义
MACROS := -D_LINUX
MACROS_DBG := -D_DEBUG -D_LINUX

#链接选项
LDXXFLAGS := -Wl,-rpath,./
LDXXFLAGS_DBG := -Wl,-rpath,./
LDOUTFLG := -o

#包含的头文件和库文件
INCS := -I$(INC_DIR)
STATIC_LIBS := $(shell $(PKGCONF) --static --libs libdpdk)
STATIC_LIBS_DBG := $(shell $(PKGCONF) --static --libs libdpdk)
SHARE_LIBS := #$(shell $(PKGCONF) --libs libdpdk)
SHARE_LIBS_DBG := #$(shell $(PKGCONF) --libs libdpdk)

#源文件、中间目标文件和依赖文件
SRCS := $(notdir $(wildcard $(SRC_DIR)/*$(SUFFIX)))
OBJS := $(addprefix $(BIN_DIR)/, $(patsubst %$(SUFFIX), %.o, $(SRCS)))
DEPS := $(addprefix $(BIN_DIR)/, $(patsubst %$(SUFFIX), %.d, $(SRCS)))
OBJS_DBG := $(addprefix $(BIN_DIR_DBG)/, $(patsubst %$(SUFFIX), %.o, $(SRCS)))
DEPS_DBG := $(addprefix $(BIN_DIR_DBG)/, $(patsubst %$(SUFFIX), %.d, $(SRCS)))

#最终目标文件
TARGET := $(BIN_DIR)/main
TARGET_DBG := $(BIN_DIR_DBG)/main

ifeq ($(BUILDTYPE), release)
#release最终目标
.PHONY : all
all : $(TARGET)
else
ifeq ($(BUILDTYPE), debug)
#debug最终目标
.PHONY : debug
debug : $(TARGET_DBG)
else
ifeq ($(BUILDTYPE), clean)
#删除makefile创建的目录
.PHONY : clean
clean :
	rm -rf $(BIN_DIR) $(BIN_DIR_DBG)
endif
endif
endif

###################################release#########################################
#生成release最终目标
$(TARGET) : $(OBJS) | $(BIN_DIR) 
	$(LD) $(LDXXFLAGS) $(SHARE_LIBS) $(LDOUTFLG) $@ $^ $(STATIC_LIBS)

#若没有BIN_DIR目录则自动生成
$(BIN_DIR) :
	mkdir -p $@

#生成release中间目标文件
$(BIN_DIR)/%.o : $(SRC_DIR)/%$(SUFFIX) $(BIN_DIR)/%.d makefile $(PC_FILE) | $(BIN_DIR)
	$(CC) -MT $@ -MMD -MP -MF $(BIN_DIR)/$*.d -c $(CXXFLAGS)  $(MACROS) $(INCS) -o $@ $<

#依赖文件会在生成中间文件的时候自动生成，这里只是为了防止报错
$(DEPS) :

#引入中间目标文件头文件依赖关系
include $(wildcard $(DEPS))

###################################debug#########################################
#生成debug最终目标
$(TARGET_DBG) : $(OBJS_DBG) | $(BIN_DIR_DBG) 
	$(LD) $(LDXXFLAGS_DBG) $(SHARE_LIBS_DBG) $(LDOUTFLG) $@ $^ $(STATIC_LIBS_DBG)

#若没有debug目录则自动生成
$(BIN_DIR_DBG) :
	mkdir -p $@

#生成debug中间目标文件
$(BIN_DIR_DBG)/%.o : $(SRC_DIR)/%$(SUFFIX) $(BIN_DIR_DBG)/%.d makefile $(PC_FILE) | $(BIN_DIR_DBG)
	$(CC) -MT $@ -MMD -MP -MF $(BIN_DIR_DBG)/$*.d -c $(CXXFLAGS_DBG) $(MACROS_DBG) $(INCS)  -o $@ $<

#依赖文件会在生成中间文件的时候自动生成，这里只是为了防止报错
$(DEPS_DBG) :

#引入中间目标文件头文件依赖关系
include $(wildcard $(DEPS_DBG))

else

APP = dpdk_hash_test

SRCS-y := $(wildcard $(SRC_DIR)/*$(SUFFIX))

#设置DPDK的安装目录
RTE_SDK := /usr/local/dpdk/share/dpdk

# Default target, detect a build directory, by looking for a path with a .config
RTE_TARGET ?= $(notdir $(abspath $(dir $(firstword $(wildcard $(RTE_SDK)/*/.config)))))

include $(RTE_SDK)/mk/rte.vars.mk

#判定O变量是否存在
ifeq ("$(BUILDTYPE)", "debug")
CFLAGS += -O0 -g3 -fmessage-length=0 $(WERROR_FLAGS) 
LDFLAGS += -Wl,-rpath,./
else
ifeq ("$(BUILDTYPE)", "release")
CFLAGS += -O3 -g0 -fmessage-length=0 $(WERROR_FLAGS) 
LDFLAGS += -Wl,-rpath,./
else
$(error "Invaild O environment variable")
endif
endif

include $(RTE_SDK)/mk/rte.extapp.mk
ifeq ("$(BUILDTYPE)", "release")
target-appclean:
	rm -rf $(BIN_DIR) $(BIN_DIR_DBG)

endif

endif
