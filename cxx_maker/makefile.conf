#生成makefile所在的目录的绝对路径
#MAKEFILE_LIST是make工具定义的环境变量，最后一个值就是当前的makefile的启动路径（可能是相对路径）
TOP_DIR := $(strip $(patsubst %/, %, $(dir $(abspath $(lastword $(MAKEFILE_LIST))))))

#内置变量
MACHINE_CPUARCH := $(shell uname -m)

#各个目录
INC_DIR := $(TOP_DIR)/include
SRC_DIR := $(TOP_DIR)/src
BIN_DIR := $(TOP_DIR)/release
BIN_DIR_DBG := $(TOP_DIR)/debug

#编译器、链接器
CC := g++
LD := g++

#编译选项
WERROR_FLAGS := -W -Wall -Wmissing-declarations -Wpointer-arith -Wcast-align -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -Wdeprecated -Wimplicit-fallthrough=2 -Wno-format-truncation -Wno-address-of-packed-member
ifeq ($(CC),gcc)
	WERROR_FLAGS += -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition -Wnested-externs
endif

CXXFLAGS := -std=c++11 $(WERROR_FLAGS) -O3
CXXFLAGS_DBG := -std=c++11 -g $(WERROR_FLAGS) -Od
ifeq ($(MACHINE_CPUARCH),aarch64)
	CXXFLAGS += -mabi=lp64
	CXXFLAGS_DBG += -mabi=lp64
else
	CXXFLAGS += -m64
	CXXFLAGS_DBG += -m64
endif

#宏定义
MACROS := -DNODEBUG -D_LINUX
MACROS_DBG := -D_DEBUG -D_LINUX

#链接选项
LDXXFLAGS :=
LDXXFLAGS_DBG :=
LDOUTFLG := -o

#包含的头文件和库文件
INCS := -I$(INC_DIR)
STATIC_LIBS :=
STATIC_LIBS_DBG :=
SHARE_LIBS :=
SHARE_LIBS_DBG :=

#后缀文件、源文件、中间目标文件和依赖文件
SUFFIX := 
SRCS := $(notdir $(wildcard $(SRC_DIR)/*$(SUFFIX)))
OBJS := $(addprefix $(BIN_DIR)/, $(patsubst %$(SUFFIX), %.o, $(SRCS)))
DEPS := $(addprefix $(BIN_DIR)/, $(patsubst %$(SUFFIX), %.d, $(SRCS)))
OBJS_DBG := $(addprefix $(BIN_DIR_DBG)/, $(patsubst %$(SUFFIX), %.o, $(SRCS)))
DEPS_DBG := $(addprefix $(BIN_DIR_DBG)/, $(patsubst %$(SUFFIX), %.d, $(SRCS)))

#最终目标文件
TARGET := $(BIN_DIR)/main
TARGET_DBG := $(BIN_DIR_DBG)/main

#release最终目标
.PHONY : all
all : $(TARGET)

#debug最终目标
.PHONY : debug
debug : $(TARGET_DBG)

###################################release#########################################
#生成release最终目标
$(TARGET) : $(OBJS) makefile | $(BIN_DIR)
	$(LD) $(LDXXFLAGS) $(SHARE_LIBS) $(LDOUTFLG) $@ $(OBJS) $(STATIC_LIBS)

#若没有BIN_DIR目录则自动生成
$(BIN_DIR) :
	mkdir -p $@

#生成release中间目标文件
$(BIN_DIR)/%.o : $(SRC_DIR)/%$(SUFFIX) $(BIN_DIR)/%.d makefile | $(BIN_DIR)
	$(CC) -MT $@ -MMD -MP -MF $(BIN_DIR)/$*.d -c $(CXXFLAGS)  $(MACROS) $(INCS) -o $@ $<

#依赖文件会在生成中间文件的时候自动生成，这里只是为了防止报错
$(DEPS) :

#引入中间目标文件头文件依赖关系
include $(wildcard $(DEPS))

###################################debug#########################################
#生成debug最终目标
$(TARGET_DBG) : $(OBJS_DBG) makefile | $(BIN_DIR_DBG)
	$(LD) $(LDXXFLAGS_DBG) $(SHARE_LIBS_DBG) $(LDOUTFLG) $@ $(OBJS_DBG) $(STATIC_LIBS_DBG)

#若没有debug目录则自动生成
$(BIN_DIR_DBG) :
	mkdir -p $@

#生成debug中间目标文件
$(BIN_DIR_DBG)/%.o : $(SRC_DIR)/%$(SUFFIX) $(BIN_DIR_DBG)/%.d makefile | $(BIN_DIR_DBG)
	$(CC) -MT $@ -MMD -MP -MF $(BIN_DIR_DBG)/$*.d -c $(CXXFLAGS_DBG) $(MACROS_DBG) $(INCS)  -o $@ $<

#依赖文件会在生成中间文件的时候自动生成，这里只是为了防止报错
$(DEPS_DBG) :

#引入中间目标文件头文件依赖关系
include $(wildcard $(DEPS_DBG))

#删除makefile创建的目录
.PHONY : clean
clean :
	rm -rf $(TARGET) $(TARGET_DBG) $(OBJS) $(OBJS_DBG) $(DEPS) $(DEPS_DBG)